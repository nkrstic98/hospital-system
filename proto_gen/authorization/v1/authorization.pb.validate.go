// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authorization/v1/authorization.proto

package authorization

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddActorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddActorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActorRequestMultiError, or nil if none found.
func (m *AddActorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	// no validation rules for Role

	if m.Team != nil {
		// no validation rules for Team
	}

	if len(errors) > 0 {
		return AddActorRequestMultiError(errors)
	}

	return nil
}

// AddActorRequestMultiError is an error wrapping multiple validation errors
// returned by AddActorRequest.ValidateAll() if the designated constraints
// aren't met.
type AddActorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActorRequestMultiError) AllErrors() []error { return m }

// AddActorRequestValidationError is the validation error returned by
// AddActorRequest.Validate if the designated constraints aren't met.
type AddActorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActorRequestValidationError) ErrorName() string { return "AddActorRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddActorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActorRequestValidationError{}

// Validate checks the field values on AddActorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddActorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActorResponseMultiError, or nil if none found.
func (m *AddActorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddActorResponseMultiError(errors)
	}

	return nil
}

// AddActorResponseMultiError is an error wrapping multiple validation errors
// returned by AddActorResponse.ValidateAll() if the designated constraints
// aren't met.
type AddActorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActorResponseMultiError) AllErrors() []error { return m }

// AddActorResponseValidationError is the validation error returned by
// AddActorResponse.Validate if the designated constraints aren't met.
type AddActorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActorResponseValidationError) ErrorName() string { return "AddActorResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddActorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActorResponseValidationError{}

// Validate checks the field values on GetActorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActorRequestMultiError, or nil if none found.
func (m *GetActorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	if len(errors) > 0 {
		return GetActorRequestMultiError(errors)
	}

	return nil
}

// GetActorRequestMultiError is an error wrapping multiple validation errors
// returned by GetActorRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActorRequestMultiError) AllErrors() []error { return m }

// GetActorRequestValidationError is the validation error returned by
// GetActorRequest.Validate if the designated constraints aren't met.
type GetActorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActorRequestValidationError) ErrorName() string { return "GetActorRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetActorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActorRequestValidationError{}

// Validate checks the field values on GetActorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActorResponseMultiError, or nil if none found.
func (m *GetActorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActorResponseValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActorResponseValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActorResponseValidationError{
				field:  "Actor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActorResponseMultiError(errors)
	}

	return nil
}

// GetActorResponseMultiError is an error wrapping multiple validation errors
// returned by GetActorResponse.ValidateAll() if the designated constraints
// aren't met.
type GetActorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActorResponseMultiError) AllErrors() []error { return m }

// GetActorResponseValidationError is the validation error returned by
// GetActorResponse.Validate if the designated constraints aren't met.
type GetActorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActorResponseValidationError) ErrorName() string { return "GetActorResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetActorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActorResponseValidationError{}

// Validate checks the field values on GetActorsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActorsRequestMultiError, or nil if none found.
func (m *GetActorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetActorsRequestMultiError(errors)
	}

	return nil
}

// GetActorsRequestMultiError is an error wrapping multiple validation errors
// returned by GetActorsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActorsRequestMultiError) AllErrors() []error { return m }

// GetActorsRequestValidationError is the validation error returned by
// GetActorsRequest.Validate if the designated constraints aren't met.
type GetActorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActorsRequestValidationError) ErrorName() string { return "GetActorsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetActorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActorsRequestValidationError{}

// Validate checks the field values on GetActorsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActorsResponseMultiError, or nil if none found.
func (m *GetActorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActorsResponseValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActorsResponseValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActorsResponseValidationError{
					field:  fmt.Sprintf("Actors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActorsResponseMultiError(errors)
	}

	return nil
}

// GetActorsResponseMultiError is an error wrapping multiple validation errors
// returned by GetActorsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetActorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActorsResponseMultiError) AllErrors() []error { return m }

// GetActorsResponseValidationError is the validation error returned by
// GetActorsResponse.Validate if the designated constraints aren't met.
type GetActorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActorsResponseValidationError) ErrorName() string {
	return "GetActorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActorsResponseValidationError{}

// Validate checks the field values on GetTeamsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTeamsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamsRequestMultiError, or nil if none found.
func (m *GetTeamsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTeamsRequestMultiError(errors)
	}

	return nil
}

// GetTeamsRequestMultiError is an error wrapping multiple validation errors
// returned by GetTeamsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTeamsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamsRequestMultiError) AllErrors() []error { return m }

// GetTeamsRequestValidationError is the validation error returned by
// GetTeamsRequest.Validate if the designated constraints aren't met.
type GetTeamsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamsRequestValidationError) ErrorName() string { return "GetTeamsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamsRequestValidationError{}

// Validate checks the field values on GetTeamsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTeamsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamsResponseMultiError, or nil if none found.
func (m *GetTeamsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTeamsResponseValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTeamsResponseValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTeamsResponseValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTeamsResponseMultiError(errors)
	}

	return nil
}

// GetTeamsResponseMultiError is an error wrapping multiple validation errors
// returned by GetTeamsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTeamsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamsResponseMultiError) AllErrors() []error { return m }

// GetTeamsResponseValidationError is the validation error returned by
// GetTeamsResponse.Validate if the designated constraints aren't met.
type GetTeamsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamsResponseValidationError) ErrorName() string { return "GetTeamsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamsResponseValidationError{}

// Validate checks the field values on AddResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceRequestMultiError, or nil if none found.
func (m *AddResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Team

	// no validation rules for TeamLead

	if all {
		switch v := interface{}(m.GetPendingTransfer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddResourceRequestValidationError{
					field:  "PendingTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddResourceRequestValidationError{
					field:  "PendingTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPendingTransfer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddResourceRequestValidationError{
				field:  "PendingTransfer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddResourceRequestMultiError(errors)
	}

	return nil
}

// AddResourceRequestMultiError is an error wrapping multiple validation errors
// returned by AddResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceRequestMultiError) AllErrors() []error { return m }

// AddResourceRequestValidationError is the validation error returned by
// AddResourceRequest.Validate if the designated constraints aren't met.
type AddResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceRequestValidationError) ErrorName() string {
	return "AddResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceRequestValidationError{}

// Validate checks the field values on AddResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceResponseMultiError, or nil if none found.
func (m *AddResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddResourceResponseMultiError(errors)
	}

	return nil
}

// AddResourceResponseMultiError is an error wrapping multiple validation
// errors returned by AddResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type AddResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceResponseMultiError) AllErrors() []error { return m }

// AddResourceResponseValidationError is the validation error returned by
// AddResourceResponse.Validate if the designated constraints aren't met.
type AddResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceResponseValidationError) ErrorName() string {
	return "AddResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceResponseValidationError{}

// Validate checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcesRequestMultiError, or nil if none found.
func (m *GetResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Archived

	if m.ActorId != nil {
		// no validation rules for ActorId
	}

	if len(errors) > 0 {
		return GetResourcesRequestMultiError(errors)
	}

	return nil
}

// GetResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcesRequestMultiError) AllErrors() []error { return m }

// GetResourcesRequestValidationError is the validation error returned by
// GetResourcesRequest.Validate if the designated constraints aren't met.
type GetResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesRequestValidationError) ErrorName() string {
	return "GetResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesRequestValidationError{}

// Validate checks the field values on GetResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcesResponseMultiError, or nil if none found.
func (m *GetResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetResourcesResponseMultiError(errors)
	}

	return nil
}

// GetResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by GetResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcesResponseMultiError) AllErrors() []error { return m }

// GetResourcesResponseValidationError is the validation error returned by
// GetResourcesResponse.Validate if the designated constraints aren't met.
type GetResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesResponseValidationError) ErrorName() string {
	return "GetResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesResponseValidationError{}

// Validate checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceRequestMultiError, or nil if none found.
func (m *GetResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetResourceRequestMultiError(errors)
	}

	return nil
}

// GetResourceRequestMultiError is an error wrapping multiple validation errors
// returned by GetResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceRequestMultiError) AllErrors() []error { return m }

// GetResourceRequestValidationError is the validation error returned by
// GetResourceRequest.Validate if the designated constraints aren't met.
type GetResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceRequestValidationError) ErrorName() string {
	return "GetResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceRequestValidationError{}

// Validate checks the field values on GetResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceResponseMultiError, or nil if none found.
func (m *GetResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResourceResponseMultiError(errors)
	}

	return nil
}

// GetResourceResponseMultiError is an error wrapping multiple validation
// errors returned by GetResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceResponseMultiError) AllErrors() []error { return m }

// GetResourceResponseValidationError is the validation error returned by
// GetResourceResponse.Validate if the designated constraints aren't met.
type GetResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceResponseValidationError) ErrorName() string {
	return "GetResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceResponseValidationError{}

// Validate checks the field values on TransferResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferResourceRequestMultiError, or nil if none found.
func (m *TransferResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AcceptTransfer

	// no validation rules for Id

	// no validation rules for ActorId

	if len(errors) > 0 {
		return TransferResourceRequestMultiError(errors)
	}

	return nil
}

// TransferResourceRequestMultiError is an error wrapping multiple validation
// errors returned by TransferResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferResourceRequestMultiError) AllErrors() []error { return m }

// TransferResourceRequestValidationError is the validation error returned by
// TransferResourceRequest.Validate if the designated constraints aren't met.
type TransferResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferResourceRequestValidationError) ErrorName() string {
	return "TransferResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferResourceRequestValidationError{}

// Validate checks the field values on TransferResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferResourceResponseMultiError, or nil if none found.
func (m *TransferResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransferResourceResponseMultiError(errors)
	}

	return nil
}

// TransferResourceResponseMultiError is an error wrapping multiple validation
// errors returned by TransferResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type TransferResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferResourceResponseMultiError) AllErrors() []error { return m }

// TransferResourceResponseValidationError is the validation error returned by
// TransferResourceResponse.Validate if the designated constraints aren't met.
type TransferResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferResourceResponseValidationError) ErrorName() string {
	return "TransferResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferResourceResponseValidationError{}

// Validate checks the field values on UpdateResourceAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceAssignmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateResourceAssignmentRequestMultiError, or nil if none found.
func (m *UpdateResourceAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for ActorId

	// no validation rules for Add

	if len(errors) > 0 {
		return UpdateResourceAssignmentRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceAssignmentRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateResourceAssignmentRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateResourceAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceAssignmentRequestMultiError) AllErrors() []error { return m }

// UpdateResourceAssignmentRequestValidationError is the validation error
// returned by UpdateResourceAssignmentRequest.Validate if the designated
// constraints aren't met.
type UpdateResourceAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceAssignmentRequestValidationError) ErrorName() string {
	return "UpdateResourceAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceAssignmentRequestValidationError{}

// Validate checks the field values on UpdateResourceAssignmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateResourceAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceAssignmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateResourceAssignmentResponseMultiError, or nil if none found.
func (m *UpdateResourceAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResourceAssignmentResponseMultiError(errors)
	}

	return nil
}

// UpdateResourceAssignmentResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateResourceAssignmentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceAssignmentResponseMultiError) AllErrors() []error { return m }

// UpdateResourceAssignmentResponseValidationError is the validation error
// returned by UpdateResourceAssignmentResponse.Validate if the designated
// constraints aren't met.
type UpdateResourceAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceAssignmentResponseValidationError) ErrorName() string {
	return "UpdateResourceAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceAssignmentResponseValidationError{}

// Validate checks the field values on AddPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPermissionRequestMultiError, or nil if none found.
func (m *AddPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	// no validation rules for ResourceId

	// no validation rules for Section

	// no validation rules for Permission

	if len(errors) > 0 {
		return AddPermissionRequestMultiError(errors)
	}

	return nil
}

// AddPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by AddPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type AddPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermissionRequestMultiError) AllErrors() []error { return m }

// AddPermissionRequestValidationError is the validation error returned by
// AddPermissionRequest.Validate if the designated constraints aren't met.
type AddPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionRequestValidationError) ErrorName() string {
	return "AddPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionRequestValidationError{}

// Validate checks the field values on AddPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPermissionResponseMultiError, or nil if none found.
func (m *AddPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddPermissionResponseMultiError(errors)
	}

	return nil
}

// AddPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by AddPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type AddPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPermissionResponseMultiError) AllErrors() []error { return m }

// AddPermissionResponseValidationError is the validation error returned by
// AddPermissionResponse.Validate if the designated constraints aren't met.
type AddPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionResponseValidationError) ErrorName() string {
	return "AddPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionResponseValidationError{}

// Validate checks the field values on RemovePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePermissionRequestMultiError, or nil if none found.
func (m *RemovePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	// no validation rules for ResourceId

	// no validation rules for Section

	if len(errors) > 0 {
		return RemovePermissionRequestMultiError(errors)
	}

	return nil
}

// RemovePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by RemovePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type RemovePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePermissionRequestMultiError) AllErrors() []error { return m }

// RemovePermissionRequestValidationError is the validation error returned by
// RemovePermissionRequest.Validate if the designated constraints aren't met.
type RemovePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionRequestValidationError) ErrorName() string {
	return "RemovePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionRequestValidationError{}

// Validate checks the field values on RemovePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemovePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemovePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemovePermissionResponseMultiError, or nil if none found.
func (m *RemovePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemovePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemovePermissionResponseMultiError(errors)
	}

	return nil
}

// RemovePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by RemovePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type RemovePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemovePermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemovePermissionResponseMultiError) AllErrors() []error { return m }

// RemovePermissionResponseValidationError is the validation error returned by
// RemovePermissionResponse.Validate if the designated constraints aren't met.
type RemovePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionResponseValidationError) ErrorName() string {
	return "RemovePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionResponseValidationError{}

// Validate checks the field values on RequestResourceTransferRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestResourceTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestResourceTransferRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestResourceTransferRequestMultiError, or nil if none found.
func (m *RequestResourceTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestResourceTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for ToTeam

	// no validation rules for ToTeamLead

	if len(errors) > 0 {
		return RequestResourceTransferRequestMultiError(errors)
	}

	return nil
}

// RequestResourceTransferRequestMultiError is an error wrapping multiple
// validation errors returned by RequestResourceTransferRequest.ValidateAll()
// if the designated constraints aren't met.
type RequestResourceTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestResourceTransferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestResourceTransferRequestMultiError) AllErrors() []error { return m }

// RequestResourceTransferRequestValidationError is the validation error
// returned by RequestResourceTransferRequest.Validate if the designated
// constraints aren't met.
type RequestResourceTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestResourceTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestResourceTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestResourceTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestResourceTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestResourceTransferRequestValidationError) ErrorName() string {
	return "RequestResourceTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestResourceTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestResourceTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestResourceTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestResourceTransferRequestValidationError{}

// Validate checks the field values on RequestResourceTransferResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestResourceTransferResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestResourceTransferResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestResourceTransferResponseMultiError, or nil if none found.
func (m *RequestResourceTransferResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestResourceTransferResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestResourceTransferResponseMultiError(errors)
	}

	return nil
}

// RequestResourceTransferResponseMultiError is an error wrapping multiple
// validation errors returned by RequestResourceTransferResponse.ValidateAll()
// if the designated constraints aren't met.
type RequestResourceTransferResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestResourceTransferResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestResourceTransferResponseMultiError) AllErrors() []error { return m }

// RequestResourceTransferResponseValidationError is the validation error
// returned by RequestResourceTransferResponse.Validate if the designated
// constraints aren't met.
type RequestResourceTransferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestResourceTransferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestResourceTransferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestResourceTransferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestResourceTransferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestResourceTransferResponseValidationError) ErrorName() string {
	return "RequestResourceTransferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestResourceTransferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestResourceTransferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestResourceTransferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestResourceTransferResponseValidationError{}

// Validate checks the field values on ArchiveResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveResourceRequestMultiError, or nil if none found.
func (m *ArchiveResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ArchiveResourceRequestMultiError(errors)
	}

	return nil
}

// ArchiveResourceRequestMultiError is an error wrapping multiple validation
// errors returned by ArchiveResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type ArchiveResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveResourceRequestMultiError) AllErrors() []error { return m }

// ArchiveResourceRequestValidationError is the validation error returned by
// ArchiveResourceRequest.Validate if the designated constraints aren't met.
type ArchiveResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveResourceRequestValidationError) ErrorName() string {
	return "ArchiveResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveResourceRequestValidationError{}

// Validate checks the field values on ArchiveResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveResourceResponseMultiError, or nil if none found.
func (m *ArchiveResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArchiveResourceResponseMultiError(errors)
	}

	return nil
}

// ArchiveResourceResponseMultiError is an error wrapping multiple validation
// errors returned by ArchiveResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type ArchiveResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveResourceResponseMultiError) AllErrors() []error { return m }

// ArchiveResourceResponseValidationError is the validation error returned by
// ArchiveResourceResponse.Validate if the designated constraints aren't met.
type ArchiveResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveResourceResponseValidationError) ErrorName() string {
	return "ArchiveResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveResourceResponseValidationError{}

// Validate checks the field values on Team with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Team) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Team with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TeamMultiError, or nil if none found.
func (m *Team) ValidateAll() error {
	return m.validate(true)
}

func (m *Team) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	for idx, item := range m.GetActors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TeamValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TeamValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TeamValidationError{
					field:  fmt.Sprintf("Actors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TeamMultiError(errors)
	}

	return nil
}

// TeamMultiError is an error wrapping multiple validation errors returned by
// Team.ValidateAll() if the designated constraints aren't met.
type TeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamMultiError) AllErrors() []error { return m }

// TeamValidationError is the validation error returned by Team.Validate if the
// designated constraints aren't met.
type TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamValidationError) ErrorName() string { return "TeamValidationError" }

// Error satisfies the builtin error interface
func (e TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamValidationError{}

// Validate checks the field values on Actor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Actor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Actor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ActorMultiError, or nil if none found.
func (m *Actor) ValidateAll() error {
	return m.validate(true)
}

func (m *Actor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	// no validation rules for Role

	// no validation rules for Permissions

	if m.Team != nil {
		// no validation rules for Team
	}

	if len(errors) > 0 {
		return ActorMultiError(errors)
	}

	return nil
}

// ActorMultiError is an error wrapping multiple validation errors returned by
// Actor.ValidateAll() if the designated constraints aren't met.
type ActorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActorMultiError) AllErrors() []error { return m }

// ActorValidationError is the validation error returned by Actor.Validate if
// the designated constraints aren't met.
type ActorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActorValidationError) ErrorName() string { return "ActorValidationError" }

// Error satisfies the builtin error interface
func (e ActorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActorValidationError{}

// Validate checks the field values on Assignment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Assignment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Assignment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssignmentMultiError, or
// nil if none found.
func (m *Assignment) ValidateAll() error {
	return m.validate(true)
}

func (m *Assignment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	// no validation rules for Role

	// no validation rules for Permissions

	if len(errors) > 0 {
		return AssignmentMultiError(errors)
	}

	return nil
}

// AssignmentMultiError is an error wrapping multiple validation errors
// returned by Assignment.ValidateAll() if the designated constraints aren't met.
type AssignmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignmentMultiError) AllErrors() []error { return m }

// AssignmentValidationError is the validation error returned by
// Assignment.Validate if the designated constraints aren't met.
type AssignmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignmentValidationError) ErrorName() string { return "AssignmentValidationError" }

// Error satisfies the builtin error interface
func (e AssignmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignmentValidationError{}

// Validate checks the field values on JourneyStep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JourneyStep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JourneyStep with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JourneyStepMultiError, or
// nil if none found.
func (m *JourneyStep) ValidateAll() error {
	return m.validate(true)
}

func (m *JourneyStep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransferTime

	// no validation rules for FromTeam

	// no validation rules for ToTeam

	// no validation rules for FromTeamLead

	// no validation rules for ToTeamLead

	if len(errors) > 0 {
		return JourneyStepMultiError(errors)
	}

	return nil
}

// JourneyStepMultiError is an error wrapping multiple validation errors
// returned by JourneyStep.ValidateAll() if the designated constraints aren't met.
type JourneyStepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JourneyStepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JourneyStepMultiError) AllErrors() []error { return m }

// JourneyStepValidationError is the validation error returned by
// JourneyStep.Validate if the designated constraints aren't met.
type JourneyStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JourneyStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JourneyStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JourneyStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JourneyStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JourneyStepValidationError) ErrorName() string { return "JourneyStepValidationError" }

// Error satisfies the builtin error interface
func (e JourneyStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJourneyStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JourneyStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JourneyStepValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetTeam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Team",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Team",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TeamLead

	for idx, item := range m.GetAssignments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Assignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Assignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  fmt.Sprintf("Assignments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetJourney() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Journey[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("Journey[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  fmt.Sprintf("Journey[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PendingTransfer != nil {

		if all {
			switch v := interface{}(m.GetPendingTransfer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  "PendingTransfer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  "PendingTransfer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPendingTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  "PendingTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}
