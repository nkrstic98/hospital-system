// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authorization/v1/authorization.proto

package authorization

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddActorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddActorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActorRequestMultiError, or nil if none found.
func (m *AddActorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	// no validation rules for Role

	if m.Team != nil {
		// no validation rules for Team
	}

	if len(errors) > 0 {
		return AddActorRequestMultiError(errors)
	}

	return nil
}

// AddActorRequestMultiError is an error wrapping multiple validation errors
// returned by AddActorRequest.ValidateAll() if the designated constraints
// aren't met.
type AddActorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActorRequestMultiError) AllErrors() []error { return m }

// AddActorRequestValidationError is the validation error returned by
// AddActorRequest.Validate if the designated constraints aren't met.
type AddActorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActorRequestValidationError) ErrorName() string { return "AddActorRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddActorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActorRequestValidationError{}

// Validate checks the field values on AddActorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddActorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActorResponseMultiError, or nil if none found.
func (m *AddActorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddActorResponseMultiError(errors)
	}

	return nil
}

// AddActorResponseMultiError is an error wrapping multiple validation errors
// returned by AddActorResponse.ValidateAll() if the designated constraints
// aren't met.
type AddActorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActorResponseMultiError) AllErrors() []error { return m }

// AddActorResponseValidationError is the validation error returned by
// AddActorResponse.Validate if the designated constraints aren't met.
type AddActorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActorResponseValidationError) ErrorName() string { return "AddActorResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddActorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActorResponseValidationError{}

// Validate checks the field values on GetActorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActorRequestMultiError, or nil if none found.
func (m *GetActorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	if len(errors) > 0 {
		return GetActorRequestMultiError(errors)
	}

	return nil
}

// GetActorRequestMultiError is an error wrapping multiple validation errors
// returned by GetActorRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActorRequestMultiError) AllErrors() []error { return m }

// GetActorRequestValidationError is the validation error returned by
// GetActorRequest.Validate if the designated constraints aren't met.
type GetActorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActorRequestValidationError) ErrorName() string { return "GetActorRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetActorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActorRequestValidationError{}

// Validate checks the field values on GetActorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActorResponseMultiError, or nil if none found.
func (m *GetActorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActorResponseValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActorResponseValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActorResponseValidationError{
				field:  "Actor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActorResponseMultiError(errors)
	}

	return nil
}

// GetActorResponseMultiError is an error wrapping multiple validation errors
// returned by GetActorResponse.ValidateAll() if the designated constraints
// aren't met.
type GetActorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActorResponseMultiError) AllErrors() []error { return m }

// GetActorResponseValidationError is the validation error returned by
// GetActorResponse.Validate if the designated constraints aren't met.
type GetActorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActorResponseValidationError) ErrorName() string { return "GetActorResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetActorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActorResponseValidationError{}

// Validate checks the field values on GetActorsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActorsRequestMultiError, or nil if none found.
func (m *GetActorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetActorsRequestMultiError(errors)
	}

	return nil
}

// GetActorsRequestMultiError is an error wrapping multiple validation errors
// returned by GetActorsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActorsRequestMultiError) AllErrors() []error { return m }

// GetActorsRequestValidationError is the validation error returned by
// GetActorsRequest.Validate if the designated constraints aren't met.
type GetActorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActorsRequestValidationError) ErrorName() string { return "GetActorsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetActorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActorsRequestValidationError{}

// Validate checks the field values on GetActorsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActorsResponseMultiError, or nil if none found.
func (m *GetActorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActorsResponseValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActorsResponseValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActorsResponseValidationError{
					field:  fmt.Sprintf("Actors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActorsResponseMultiError(errors)
	}

	return nil
}

// GetActorsResponseMultiError is an error wrapping multiple validation errors
// returned by GetActorsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetActorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActorsResponseMultiError) AllErrors() []error { return m }

// GetActorsResponseValidationError is the validation error returned by
// GetActorsResponse.Validate if the designated constraints aren't met.
type GetActorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActorsResponseValidationError) ErrorName() string {
	return "GetActorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActorsResponseValidationError{}

// Validate checks the field values on GetTeamsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTeamsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamsRequestMultiError, or nil if none found.
func (m *GetTeamsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTeamsRequestMultiError(errors)
	}

	return nil
}

// GetTeamsRequestMultiError is an error wrapping multiple validation errors
// returned by GetTeamsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTeamsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamsRequestMultiError) AllErrors() []error { return m }

// GetTeamsRequestValidationError is the validation error returned by
// GetTeamsRequest.Validate if the designated constraints aren't met.
type GetTeamsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamsRequestValidationError) ErrorName() string { return "GetTeamsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamsRequestValidationError{}

// Validate checks the field values on GetTeamsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTeamsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamsResponseMultiError, or nil if none found.
func (m *GetTeamsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTeamsResponseValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTeamsResponseValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTeamsResponseValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTeamsResponseMultiError(errors)
	}

	return nil
}

// GetTeamsResponseMultiError is an error wrapping multiple validation errors
// returned by GetTeamsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTeamsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamsResponseMultiError) AllErrors() []error { return m }

// GetTeamsResponseValidationError is the validation error returned by
// GetTeamsResponse.Validate if the designated constraints aren't met.
type GetTeamsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamsResponseValidationError) ErrorName() string { return "GetTeamsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamsResponseValidationError{}

// Validate checks the field values on AddResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceRequestMultiError, or nil if none found.
func (m *AddResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Team

	// no validation rules for TeamLead

	if len(errors) > 0 {
		return AddResourceRequestMultiError(errors)
	}

	return nil
}

// AddResourceRequestMultiError is an error wrapping multiple validation errors
// returned by AddResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceRequestMultiError) AllErrors() []error { return m }

// AddResourceRequestValidationError is the validation error returned by
// AddResourceRequest.Validate if the designated constraints aren't met.
type AddResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceRequestValidationError) ErrorName() string {
	return "AddResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceRequestValidationError{}

// Validate checks the field values on AddResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceResponseMultiError, or nil if none found.
func (m *AddResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddResourceResponseMultiError(errors)
	}

	return nil
}

// AddResourceResponseMultiError is an error wrapping multiple validation
// errors returned by AddResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type AddResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceResponseMultiError) AllErrors() []error { return m }

// AddResourceResponseValidationError is the validation error returned by
// AddResourceResponse.Validate if the designated constraints aren't met.
type AddResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceResponseValidationError) ErrorName() string {
	return "AddResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceResponseValidationError{}

// Validate checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcesRequestMultiError, or nil if none found.
func (m *GetResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetResourcesRequestMultiError(errors)
	}

	return nil
}

// GetResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcesRequestMultiError) AllErrors() []error { return m }

// GetResourcesRequestValidationError is the validation error returned by
// GetResourcesRequest.Validate if the designated constraints aren't met.
type GetResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesRequestValidationError) ErrorName() string {
	return "GetResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesRequestValidationError{}

// Validate checks the field values on GetResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourcesResponseMultiError, or nil if none found.
func (m *GetResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetResourcesResponseMultiError(errors)
	}

	return nil
}

// GetResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by GetResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourcesResponseMultiError) AllErrors() []error { return m }

// GetResourcesResponseValidationError is the validation error returned by
// GetResourcesResponse.Validate if the designated constraints aren't met.
type GetResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesResponseValidationError) ErrorName() string {
	return "GetResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesResponseValidationError{}

// Validate checks the field values on ArchiveResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveResourceRequestMultiError, or nil if none found.
func (m *ArchiveResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ArchiveResourceRequestMultiError(errors)
	}

	return nil
}

// ArchiveResourceRequestMultiError is an error wrapping multiple validation
// errors returned by ArchiveResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type ArchiveResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveResourceRequestMultiError) AllErrors() []error { return m }

// ArchiveResourceRequestValidationError is the validation error returned by
// ArchiveResourceRequest.Validate if the designated constraints aren't met.
type ArchiveResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveResourceRequestValidationError) ErrorName() string {
	return "ArchiveResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveResourceRequestValidationError{}

// Validate checks the field values on ArchiveResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveResourceResponseMultiError, or nil if none found.
func (m *ArchiveResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ArchiveResourceResponseMultiError(errors)
	}

	return nil
}

// ArchiveResourceResponseMultiError is an error wrapping multiple validation
// errors returned by ArchiveResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type ArchiveResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveResourceResponseMultiError) AllErrors() []error { return m }

// ArchiveResourceResponseValidationError is the validation error returned by
// ArchiveResourceResponse.Validate if the designated constraints aren't met.
type ArchiveResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveResourceResponseValidationError) ErrorName() string {
	return "ArchiveResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveResourceResponseValidationError{}

// Validate checks the field values on Team with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Team) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Team with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TeamMultiError, or nil if none found.
func (m *Team) ValidateAll() error {
	return m.validate(true)
}

func (m *Team) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	for idx, item := range m.GetActors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TeamValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TeamValidationError{
						field:  fmt.Sprintf("Actors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TeamValidationError{
					field:  fmt.Sprintf("Actors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TeamMultiError(errors)
	}

	return nil
}

// TeamMultiError is an error wrapping multiple validation errors returned by
// Team.ValidateAll() if the designated constraints aren't met.
type TeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamMultiError) AllErrors() []error { return m }

// TeamValidationError is the validation error returned by Team.Validate if the
// designated constraints aren't met.
type TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamValidationError) ErrorName() string { return "TeamValidationError" }

// Error satisfies the builtin error interface
func (e TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamValidationError{}

// Validate checks the field values on Actor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Actor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Actor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ActorMultiError, or nil if none found.
func (m *Actor) ValidateAll() error {
	return m.validate(true)
}

func (m *Actor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActorId

	// no validation rules for Role

	if m.Team != nil {
		// no validation rules for Team
	}

	if len(errors) > 0 {
		return ActorMultiError(errors)
	}

	return nil
}

// ActorMultiError is an error wrapping multiple validation errors returned by
// Actor.ValidateAll() if the designated constraints aren't met.
type ActorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActorMultiError) AllErrors() []error { return m }

// ActorValidationError is the validation error returned by Actor.Validate if
// the designated constraints aren't met.
type ActorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActorValidationError) ErrorName() string { return "ActorValidationError" }

// Error satisfies the builtin error interface
func (e ActorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActorValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetTeam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Team",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Team",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceValidationError{
				field:  "Team",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TeamLead

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}
