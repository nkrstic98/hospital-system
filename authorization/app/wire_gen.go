// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"fmt"
	"github.com/go-kratos/kratos/contrib/registry/consul/v2"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/middleware/recovery"
	"github.com/go-kratos/kratos/v2/middleware/validate"
	"github.com/go-kratos/kratos/v2/registry"
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/hashicorp/consul/api"
	"gorm.io/gorm"
	"hospital-system/authorization/app/repositories/actor"
	"hospital-system/authorization/app/repositories/resource"
	"hospital-system/authorization/app/repositories/role"
	"hospital-system/authorization/app/repositories/team"
	"hospital-system/authorization/app/rpc"
	actor2 "hospital-system/authorization/app/services/actor"
	resource2 "hospital-system/authorization/app/services/resource"
	team2 "hospital-system/authorization/app/services/team"
	"hospital-system/authorization/config"
	"hospital-system/authorization/db"
	"hospital-system/proto_gen/authorization/v1"
)

// Injectors from wire.go:

func Build(cfg config.Config) (*kratos.App, func(), error) {
	gormDB, err := db.OpenConnection(cfg)
	if err != nil {
		return nil, nil, err
	}
	service := buildService(gormDB)
	registry := provideRegistry(cfg)
	app, err := initializeApp(cfg, service, registry)
	if err != nil {
		return nil, nil, err
	}
	return app, func() {
	}, nil
}

func buildService(db2 *gorm.DB) *rpc.Service {
	repositoryImpl := actor.NewRepository(db2)
	roleRepositoryImpl := role.NewRepository(db2)
	teamRepositoryImpl := team.NewRepository(db2)
	serviceImpl := actor2.NewService(repositoryImpl, roleRepositoryImpl, teamRepositoryImpl)
	teamServiceImpl := team2.NewService(teamRepositoryImpl, serviceImpl)
	resourceRepositoryImpl := resource.NewRepository(db2)
	resourceServiceImpl := resource2.NewService(resourceRepositoryImpl)
	service := rpc.NewService(serviceImpl, teamServiceImpl, resourceServiceImpl)
	return service
}

// wire.go:

func initializeApp(cfg config.Config, service *rpc.Service, registrar registry.Registrar) (*kratos.App, error) {
	server := provideServer(cfg)
	authorization.RegisterAuthorizationServiceServer(server, service)

	app := kratos.New(kratos.Name(cfg.Registry.ServiceName), kratos.Server(
		server,
	), kratos.Registrar(registrar), kratos.AfterStop(func(ctx context.Context) error {
		return db.CloseConnection()
	}),
	)

	return app, nil
}

func provideServer(cfg config.Config) *grpc.Server {
	return grpc.NewServer(grpc.Address(fmt.Sprintf(":%s", cfg.Web.Port)), grpc.Timeout(cfg.Web.Timeout), grpc.Middleware(recovery.Recovery(), validate.Validator()))
}

func provideRegistry(cfg config.Config) *consul.Registry {
	consulConfig := api.DefaultConfig()
	consulConfig.Address = fmt.Sprintf("%s:%v", cfg.Registry.RegistrarHost, cfg.Registry.RegistrarPort)
	c, err := api.NewClient(consulConfig)
	if err != nil {
		panic(fmt.Sprintf("Failed to init Consul client. Error:\n%v", err))
	}
	return consul.New(c)
}
